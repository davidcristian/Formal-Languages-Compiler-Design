Program Variable OptionalArray Value Declaration OptionalAssignment Primitive ArrayDeclaration Type CompoundStatement StatementList StatementListTail Statement StatementTail AssignStatement Factor Expression ExpressionTail Term TermTail IOStatement IfStatement ElseStatement WhileStatement Conditions ConditionsTail Condition ConditionTail SimpleCondition Relation
Identifier Constant number char string array input output if else while + - * / % = == != < > <= >= && \d ( ) [ ] { } : ;
Program

Program -> StatementList

Variable -> Identifier OptionalArray
OptionalArray -> [ Expression ] | ε
Value -> Constant | Variable

Declaration -> Type OptionalAssignment
OptionalAssignment -> = Expression | ε

Primitive -> number | char | string
ArrayDeclaration -> array ( Primitive ) [ Expression ]
Type -> Primitive | ArrayDeclaration

CompoundStatement -> { StatementList }
StatementList -> Statement ; StatementListTail
StatementListTail -> StatementList | ε

Statement -> Identifier StatementTail | IOStatement | IfStatement | WhileStatement
StatementTail -> : Declaration | OptionalArray = Expression

AssignStatement -> Variable = Expression
Factor -> ( Expression ) | Value

Expression -> Term ExpressionTail
ExpressionTail -> + Term ExpressionTail | - Term ExpressionTail | ε

Term -> Factor TermTail
TermTail -> * Factor TermTail | / Factor TermTail | % Factor TermTail | ε

IOStatement -> input ( Variable ) | output ( Expression )
IfStatement -> if ( Conditions ) CompoundStatement ElseStatement
ElseStatement -> else CompoundStatement | ε
WhileStatement -> while ( Conditions ) CompoundStatement

Conditions -> Condition ConditionsTail
ConditionsTail -> \d Condition ConditionsTail | ε
Condition -> SimpleCondition ConditionTail
ConditionTail -> && SimpleCondition ConditionTail | ε

SimpleCondition -> Expression Relation Expression
Relation -> == | != | < | > | <= | >=
