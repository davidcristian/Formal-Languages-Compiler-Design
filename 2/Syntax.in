program ::= function | function newlines program
function ::= "FUN" string "(" decllist ")" ":" type cmpdstmt

newlines ::= newline | newline newlines
newline ::= "\n" | "\r\n"

decllist ::= declaration | declaration "," decllist
declaration ::= IDENTIFIER ":" type | IDENTIFIER ":" type "=" expression

primitive ::= "VOID" | "NUMBER" | "CHAR" | "STRING"
arraydecl ::= "ARRAY" "<" primitive ">" "(" number ")" 
type ::= primitive | arraydecl

cmpdstmt ::= "{" stmtlist "}"
stmtlist ::= stmt | stmt newlines stmtlist 

stmt ::= simplstmt | structstmt
simplstmt ::= decllist | assignstmt | iostmt

assignstmt ::= IDENTIFIER "=" expression
expression ::=  term | expression "+" term | expression "-" term
term ::= factor | term "*" factor | term "/" factor | term "%" factor
factor ::= "(" expression ")" | IDENTIFIER | number

iostmt ::= "INPUT" "(" IDENTIFIER ")" | "OUTPUT" "(" IDENTIFIER ")"
structstmt ::= cmpdstmt | ifstmt | whilestmt | forstmt

ifstmt ::= "IF" condition cmpdstmt ["ELSE" cmpdstmt]
whilestmt ::= "WHILE" condition cmpdstmt
forstmt ::= "FOR" "(" declaration ";" condition ";" assignstmt ")" cmpdstmt

condition ::= expression RELATION expression | "not" condition
RELATION ::= "<" | "<=" | "==" | ">=" | ">"
