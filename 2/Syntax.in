program ::= [newlines] function | function newlines program
function ::= "FUN" IDENTIFIER "(" [decllist] ")" ":" type cmpdstmt

newlines ::= newline{newline}
newline ::= [CR]LF | comment [CR]LF
comment ::= "--" STRING

decllist ::= declaration | declaration "," decllist
declaration ::= IDENTIFIER ":" type | ["CONST"] IDENTIFIER ":" type "=" expression

primitive ::= "VOID" | "NUMBER" | "CHAR" | "STRING"
arraydecl ::= "ARRAY" "<" primitive ">" "(" expression ")"
type ::= primitive | arraydecl

cmpdstmt ::= "{" stmtlist "}"
stmtlist ::= [comment] stmt | stmt newlines stmtlist

stmt ::= simplstmt | structstmt
simplstmt ::= decllist | assignstmt | iostmt | callstmt | returnstmt | breakstmt
structstmt ::= cmpdstmt | ifstmt | dostmt | whilestmt | forstmt

assignstmt ::= IDENTIFIER "=" expression
expression ::=  term | expression "+" term | expression "-" term
term ::= factor | term "*" factor | term "/" factor | term "%" factor
factor ::= "(" expression ")" | IDENTIFIER | NUMBER

iostmt ::= "INPUT" "(" IDENTIFIER ")" | "OUTPUT" "(" IDENTIFIER ")"
callstmt ::= IDENTIFIER "(" [expression {"," expression}] ")"
returnstmt ::= "RETURN" | "RETURN" expression
breakstmt ::= "BREAK"

ifstmt ::= "IF" "(" condition ")" cmpdstmt ["ELSE" cmpdstmt]
dostmt ::= "DO" cmpdstmt "WHILE" "(" condition ")"
whilestmt ::= "WHILE" "(" condition ")" cmpdstmt
forstmt ::= "FOR" "(" (declaration | assignstmt) ";" condition ";" assignstmt ")" cmpdstmt

condition ::= expression RELATION expression | "not" condition
RELATION ::= "<" | "<=" | "==" | ">=" | ">"
