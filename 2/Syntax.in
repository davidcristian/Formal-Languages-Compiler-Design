program ::= stmtlist

newlines ::= newline{newline}
newline ::= [CR]LF

decllist ::= declaration | declaration "," decllist
declaration ::= IDENTIFIER ":" type | IDENTIFIER ":" type "=" expression

primitive ::= "NUMBER" | "CHAR" | "STRING"
arraydecl ::= "ARRAY" "<" primitive ">" "(" expression ")"
type ::= primitive | arraydecl

cmpdstmt ::= "{" stmtlist "}"
stmtlist ::= stmt | stmt newlines stmtlist

stmt ::= simplstmt | structstmt
simplstmt ::= decllist | assignstmt | iostmt
structstmt ::= cmpdstmt | ifstmt | whilestmt | forstmt

assignstmt ::= IDENTIFIER "=" expression
expression ::=  term | expression "+" term | expression "-" term
term ::= factor | term "*" factor | term "/" factor | term "%" factor
factor ::= "(" expression ")" | IDENTIFIER | NUMBER

iostmt ::= "INPUT" "(" IDENTIFIER ")" | "OUTPUT" "(" IDENTIFIER ")"

ifstmt ::= "IF" "(" conditions ")" cmpdstmt ["ELSE" cmpdstmt]
whilestmt ::= "WHILE" "(" conditions ")" cmpdstmt
forstmt ::= "FOR" "(" (declaration | assignstmt) ";" conditions ";" assignstmt ")" cmpdstmt

conditions ::= condition | condition "OR" conditions
condition ::= simplcond | simplcond "AND" condition
simplcond ::= expression RELATION expression | "NOT" simplcond
RELATION ::= "<" | "<=" | "==" | ">=" | ">"
